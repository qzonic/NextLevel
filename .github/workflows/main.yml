name: Phonebook CI/CD

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.0-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_PORT: 5432
          POSTGRES_DB: pythondigest
          POSTGRES_USER: pythondigest
          POSTGRES_PASSWORD: debug
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: | 
        # обновление pip
        python -m pip install --upgrade pip
        # установка зависимостей
        pip install -r requirements.txt 

    - name: Test with django tests
      run: |
        # перейти в папку, содержащую manage.py — 
        cd phonebook/
        # запустить написанные разработчиком тесты
        python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: qzonic/phonebook:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            sudo rm .env
            sudo touch .env
            sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo echo HOST=${{ secrets.HOST }} >> .env
            sudo echo DEBUG=${{ secrets.DEBUG }} >> .env
            
            sudo docker-compose up -d
